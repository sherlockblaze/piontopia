// Code generated by protoc-gen-go. DO NOT EDIT.
// source: power.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PowerKind int32

const (
	PowerKind_TecPower   PowerKind = 0
	PowerKind_SoftPower  PowerKind = 1
	PowerKind_OtherPower PowerKind = 2
)

var PowerKind_name = map[int32]string{
	0: "TecPower",
	1: "SoftPower",
	2: "OtherPower",
}

var PowerKind_value = map[string]int32{
	"TecPower":   0,
	"SoftPower":  1,
	"OtherPower": 2,
}

func (x PowerKind) String() string {
	return proto.EnumName(PowerKind_name, int32(x))
}

func (PowerKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a4fab2da8ea5416b, []int{0}
}

type Power struct {
	ID                   string            `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Powers               map[string]string `protobuf:"bytes,2,rep,name=Powers,proto3" json:"Powers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Kind                 PowerKind         `protobuf:"varint,3,opt,name=kind,proto3,enum=proto.PowerKind" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Power) Reset()         { *m = Power{} }
func (m *Power) String() string { return proto.CompactTextString(m) }
func (*Power) ProtoMessage()    {}
func (*Power) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4fab2da8ea5416b, []int{0}
}

func (m *Power) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Power.Unmarshal(m, b)
}
func (m *Power) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Power.Marshal(b, m, deterministic)
}
func (m *Power) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Power.Merge(m, src)
}
func (m *Power) XXX_Size() int {
	return xxx_messageInfo_Power.Size(m)
}
func (m *Power) XXX_DiscardUnknown() {
	xxx_messageInfo_Power.DiscardUnknown(m)
}

var xxx_messageInfo_Power proto.InternalMessageInfo

func (m *Power) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Power) GetPowers() map[string]string {
	if m != nil {
		return m.Powers
	}
	return nil
}

func (m *Power) GetKind() PowerKind {
	if m != nil {
		return m.Kind
	}
	return PowerKind_TecPower
}

func init() {
	proto.RegisterEnum("proto.PowerKind", PowerKind_name, PowerKind_value)
	proto.RegisterType((*Power)(nil), "proto.Power")
	proto.RegisterMapType((map[string]string)(nil), "proto.Power.PowersEntry")
}

func init() { proto.RegisterFile("power.proto", fileDescriptor_a4fab2da8ea5416b) }

var fileDescriptor_a4fab2da8ea5416b = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xc8, 0x2f, 0x4f,
	0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xab, 0x18, 0xb9, 0x58,
	0x03, 0x40, 0xc2, 0x42, 0x7c, 0x5c, 0x4c, 0x9e, 0x2e, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41,
	0x4c, 0x9e, 0x2e, 0x42, 0x06, 0x5c, 0x6c, 0x60, 0x89, 0x62, 0x09, 0x26, 0x05, 0x66, 0x0d, 0x6e,
	0x23, 0x09, 0x88, 0x46, 0x3d, 0xb0, 0x20, 0x84, 0x2c, 0x76, 0xcd, 0x2b, 0x29, 0xaa, 0x0c, 0x82,
	0xaa, 0x13, 0x52, 0xe1, 0x62, 0xc9, 0xce, 0xcc, 0x4b, 0x91, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x33,
	0x12, 0x40, 0x56, 0xef, 0x9d, 0x99, 0x97, 0x12, 0x04, 0x96, 0x95, 0xb2, 0xe4, 0xe2, 0x46, 0xd2,
	0x2c, 0x24, 0xc0, 0xc5, 0x9c, 0x9d, 0x5a, 0x09, 0xb5, 0x17, 0xc4, 0x14, 0x12, 0xe1, 0x62, 0x2d,
	0x4b, 0xcc, 0x29, 0x4d, 0x95, 0x60, 0x02, 0x8b, 0x41, 0x38, 0x56, 0x4c, 0x16, 0x8c, 0x5a, 0x16,
	0x5c, 0x9c, 0x70, 0xd3, 0x84, 0x78, 0xb8, 0x38, 0x42, 0x52, 0x93, 0xc1, 0x7c, 0x01, 0x06, 0x21,
	0x5e, 0x2e, 0xce, 0xe0, 0xfc, 0xb4, 0x12, 0x08, 0x97, 0x51, 0x88, 0x8f, 0x8b, 0xcb, 0xbf, 0x24,
	0x23, 0xb5, 0x08, 0xc2, 0x67, 0x4a, 0x62, 0x03, 0xbb, 0xc5, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff,
	0x39, 0x5b, 0x05, 0xfd, 0x03, 0x01, 0x00, 0x00,
}
