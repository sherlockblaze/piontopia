// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package proto

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0x5c, 0xa5,
	0xc5, 0xa9, 0x45, 0x10, 0x21, 0xa3, 0x09, 0x8c, 0x5c, 0x3c, 0xa1, 0xc5, 0xa9, 0x45, 0xc1, 0x10,
	0x85, 0xc5, 0x42, 0x1a, 0x5c, 0x5c, 0xce, 0x45, 0xa9, 0x89, 0x25, 0xa9, 0x20, 0x51, 0x21, 0x6e,
	0x88, 0x32, 0x3d, 0x10, 0x47, 0x8a, 0x17, 0x89, 0xe3, 0xe9, 0x22, 0xa4, 0xc5, 0xc5, 0xe5, 0x92,
	0x9a, 0x93, 0x0a, 0x55, 0x89, 0x2a, 0x89, 0xa9, 0x96, 0xc7, 0x39, 0x23, 0x35, 0x39, 0x3b, 0xbf,
	0xb4, 0x04, 0x9b, 0x6a, 0x64, 0x6b, 0x92, 0xd8, 0xc0, 0x6c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x3a, 0x1f, 0x1e, 0x42, 0xbd, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServicesClient is the client API for UserServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServicesClient interface {
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserID, error)
	DeleteUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserID, error)
	CheckoutUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error)
}

type userServicesClient struct {
	cc *grpc.ClientConn
}

func NewUserServicesClient(cc *grpc.ClientConn) UserServicesClient {
	return &userServicesClient{cc}
}

func (c *userServicesClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserID, error) {
	out := new(UserID)
	err := c.cc.Invoke(ctx, "/proto.UserServices/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicesClient) DeleteUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserID, error) {
	out := new(UserID)
	err := c.cc.Invoke(ctx, "/proto.UserServices/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicesClient) CheckoutUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.UserServices/CheckoutUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServicesServer is the server API for UserServices service.
type UserServicesServer interface {
	CreateUser(context.Context, *User) (*UserID, error)
	DeleteUser(context.Context, *UserID) (*UserID, error)
	CheckoutUser(context.Context, *UserID) (*User, error)
}

// UnimplementedUserServicesServer can be embedded to have forward compatible implementations.
type UnimplementedUserServicesServer struct {
}

func (*UnimplementedUserServicesServer) CreateUser(ctx context.Context, req *User) (*UserID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedUserServicesServer) DeleteUser(ctx context.Context, req *UserID) (*UserID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedUserServicesServer) CheckoutUser(ctx context.Context, req *UserID) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckoutUser not implemented")
}

func RegisterUserServicesServer(s *grpc.Server, srv UserServicesServer) {
	s.RegisterService(&_UserServices_serviceDesc, srv)
}

func _UserServices_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserServices/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServices_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserServices/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).DeleteUser(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServices_CheckoutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).CheckoutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserServices/CheckoutUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).CheckoutUser(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserServices",
	HandlerType: (*UserServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserServices_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserServices_DeleteUser_Handler,
		},
		{
			MethodName: "CheckoutUser",
			Handler:    _UserServices_CheckoutUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
